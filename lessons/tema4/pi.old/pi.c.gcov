        -:    0:Source:pi.c
        -:    0:Graph:pi.gcno
        -:    0:Data:pi.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <memory.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:int N, N4;
        -:    5:char a[10240], b[10240], c[10240];
        -:    6:char string[100];
        -:    7:unsigned d239[239][10][2];
        -:    8:unsigned d25[25][10][2];
        -:    9:unsigned d5[5][10][2];
        -:   10:unsigned mul[4][10][2];
        -:   11:#define LONGDIV_UNROLL 4
        -:   12:#define _R 0
        -:   13:#define _Q 1
        -:   14:#define DIVIDE(matrix_addr,map)				\
        -:   15:  {  int k; unsigned q, r, u, * addr; char *_x;		\
        -:   16:    r= 0;						\
        -:   17:    _x = matrix_addr;					\
        -:   18:    for (k = 0; k <= N4; k++)				\
        -:   19:      {							\
        -:   20:	addr = map[r][*_x];				\
        -:   21:	*_x = *(addr + _Q);				\
        -:   22:	r = *addr;					\
        -:   23:	_x++;						\
        -:   24:      }}
        -:   25:
        -:   26:void
        -:   27:set_datasets ()
function set_datasets called 1 returned 100% blocks executed 100%
        1:   28:{
        -:   29:  unsigned r_10, r, x, u, q;
        -:   30:  /*multiply*/
        5:   31:  for (r=0; r<4;r++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   32:    {
       44:   33:      for ( x=0; x<10; x++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   34:	{
       40:   35:	  unsigned _q = 4 * x + r;
       40:   36:	  unsigned _r = _q / 10;
       40:   37:	  mul[r][x][_R] = _r;
       40:   38:	  mul[r][x][_Q] = _q - _r * 10;
        -:   39:	  
        -:   40:	}
        -:   41:    }
        -:   42:	 
        -:   43:
        -:   44:  /* d239[r][x][_R o _Q] */
      240:   45:  for (r = 0; r < 239; r++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   46:    {
      239:   47:      r_10 = r * 10;
     2629:   48:      for (x = 0; x < 10; x++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   49:	{
     2390:   50:	  u = r_10 + x;
     2390:   51:	  q = u / 239;
     2390:   52:	  d239[r][x][_R] = u - q * 239;
     2390:   53:	  d239[r][x][_Q] = q;
        -:   54:	}
        -:   55:    }
        -:   56:
        -:   57:  /* d25[r][x][_r o _q] */
       26:   58:  for (r = 0; r < 25; r++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   59:    {
       25:   60:      r_10 = r * 10;
        -:   61:
      275:   62:      for (x = 0; x < 10; x++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:	{
      250:   64:	  u = r_10 + x;
      250:   65:	  q = u / 25;
      250:   66:	  d25[r][x][_R] = u - q * 25;
      250:   67:	  d25[r][x][_Q] = q;
        -:   68:	}
        -:   69:    }
        -:   70:
        -:   71:  /* d5[r][x][_r o _q] */
        6:   72:  for (r = 0; r < 5; r++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   73:    {
        5:   74:      r_10 = r * 10;
        -:   75:
       55:   76:      for (x = 0; x < 10; x++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   77:	{
       50:   78:	  u = r_10 + x;
       50:   79:	  q = u / 5;
       50:   80:	  d5[r][x][_R] = u - q * 5;
       50:   81:	  d5[r][x][_Q] = q;
        -:   82:	}
        -:   83:    }
        -:   84:
        1:   85:}
        -:   86:
        -:   87:void
        -:   88:LONGDIV (char *x, int n)
function LONGDIV called 10004 returned 100% blocks executed 100%
    10004:   89:{
        -:   90:  int k, steps, rest;
        -:   91:  unsigned q, r, u;
        -:   92:  
    10004:   93:  steps = (N4+1) / LONGDIV_UNROLL;
    10004:   94:  rest = (N4+1) - steps * LONGDIV_UNROLL;
        -:   95:
    10004:   96:  r = 0;
        -:   97:  
 25030008:   98:  for (k = 0; k < steps; k++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   99:    {
 25020004:  100:      u = r * 10 + *x;
 25020004:  101:      q = u / n;
 25020004:  102:      r = u - q * n;
 25020004:  103:      *x = q;
        -:  104:
 25020004:  105:      x++;
        -:  106:
 25020004:  107:      u = r * 10 + *x;
 25020004:  108:      q = u / n;
 25020004:  109:      r = u - q * n;
 25020004:  110:      *x = q;
        -:  111:
 25020004:  112:      x++;
        -:  113:
 25020004:  114:      u = r * 10 + *x;
 25020004:  115:      q = u / n;
 25020004:  116:      r = u - q * n;
 25020004:  117:      *x = q;
        -:  118:
 25020004:  119:      x++;
        -:  120:
 25020004:  121:      u = r * 10 + *x;
 25020004:  122:      q = u / n;
 25020004:  123:      r = u - q * n;
 25020004:  124:      *x = q;
        -:  125:      
 25020004:  126:      x++;
        -:  127:    }
        -:  128:
    20008:  129:  for (k = 0; k < rest; k++, x++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  130:    {
    10004:  131:      u = r * 10 + *x;
    10004:  132:      q = u / n;
    10004:  133:      r = u - q * n;
    10004:  134:      *x = q;
        -:  135:    }
        -:  136:
    10004:  137:}
        -:  138:
        -:  139:void
        -:  140:MULTIPLY (char *x)
function MULTIPLY called 2 returned 100% blocks executed 100%
        2:  141:{
        -:  142:  int j, k, n;
        -:  143:  unsigned q, r, u;
        2:  144:  r = 0;
        2:  145:  x += N4;
        -:  146:  /*
        -:  147:     r : [0,3]
        -:  148:     x : [0,9]
        -:  149:   */
    20012:  150:  for (k = N4; k >= 0; k--, x--)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  151:    {
    20010:  152:      q = mul[r][*x][_Q];
    20010:  153:      r = mul[r][*x][_R];
    20010:  154:      *x = q;
        -:  155:    }
        2:  156:}
        -:  157:
        -:  158:void
        -:  159:SET (char *x, int n)
function SET called 10007 returned 100% blocks executed 100%
    10007:  160:{
    10007:  161:  memset (x, 0, N4 + 1);
call    0 returned 100%
    10007:  162:  *x = n;
    10007:  163:}
        -:  164:
        -:  165:void
        -:  166:SUBTRACT (char *x, char *y, char *z)
function SUBTRACT called 20011 returned 100% blocks executed 100%
    20011:  167:{
        -:  168:  int j, k;
        -:  169:  unsigned q, r, u;
        -:  170:  char v;
    20011:  171:  x += N4;
    20011:  172:  y += N4;
    20011:  173:  z += N4;
200230066:  174:  for (k = N4; k >= 0; k--, x--, y--, z--)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  175:    {
200210055:  176:      v = *y - *z;
200210055:  177:      if (v < 0)		//HEAVY
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:  178:	{
102214751:  179:	  *x = v + 10;
102214751:  180:	  *(z - 1) = *(z - 1) + 1;
        -:  181:	}
        -:  182:      else
 97995304:  183:	*x = v;
        -:  184:    }
    20011:  185:}
        -:  186:
        -:  187:void calculate (void);
        -:  188:void progress (void);
        -:  189:void epilog (void);
        -:  190:int
        -:  191:main (int argc, char *argv[])
function main called 1 returned 100% blocks executed 100%
        1:  192:{
        1:  193:  N = 10000;
        1:  194:  setbuf (stdout, NULL);
call    0 returned 100%
        1:  195:  set_datasets ();
call    0 returned 100%
        1:  196:  calculate ();
call    0 returned 100%
        1:  197:  epilog ();
call    0 returned 100%
        1:  198:  return 0;
        -:  199:}
        -:  200:
        -:  201:void
        -:  202:calculate (void)
function calculate called 1 returned 100% blocks executed 100%
        1:  203:{
        -:  204:  int j;
        -:  205:
        1:  206:  N4 = N + 4;
        1:  207:  SET (a, 0);
call    0 returned 100%
        1:  208:  SET (b, 0);
call    0 returned 100%
    10005:  209:  for (j = 2 * N4 + 1; j >= 3; j -= 2)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  210:    {
    10004:  211:      SET (c, 1);
call    0 returned 100%
    10004:  212:      LONGDIV (c, j);
call    0 returned 100%
    10004:  213:      SUBTRACT (a, c, a);
call    0 returned 100%
    10004:  214:      DIVIDE(a,d25);
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10004:  215:      SUBTRACT (b, c, b);    
call    0 returned 100%
    10004:  216:      DIVIDE(b,d239);
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10004:  217:      DIVIDE(b,d239);     
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  218:    }
        -:  219:
      251:  220:  for (j=0; j<250; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  221:    {
      250:  222:      printf("........................................");
call    0 returned 100%
        -:  223:    }
        1:  224:  printf(".....");
call    0 returned 100%
        1:  225:  SET (c, 1);
call    0 returned 100%
        1:  226:  SUBTRACT (a, c, a);
call    0 returned 100%
        1:  227:  DIVIDE(a,d5);
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        1:  228:  SUBTRACT (b, c, b);
call    0 returned 100%
        1:  229:  DIVIDE(b,d239);
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        1:  230:  MULTIPLY (a);
call    0 returned 100%
        1:  231:  SUBTRACT (a, a, b);
call    0 returned 100%
        1:  232:  MULTIPLY (a);
call    0 returned 100%
        1:  233:}
        -:  234:
        -:  235:void
        -:  236:progress (void)
function progress called 0 returned 0% blocks executed 0%
    #####:  237:{
    #####:  238:  printf (".");
call    0 never executed
    #####:  239:}
        -:  240:
        -:  241:void
        -:  242:epilog (void)
function epilog called 1 returned 100% blocks executed 100%
        1:  243:{
        -:  244:  int j;
        -:  245:  {
        1:  246:    fprintf (stdout, " \n3.");
call    0 returned 100%
    10001:  247:    for (j = 1; j <= N; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  248:      {
    10000:  249:	fprintf (stdout, "%d", a[j]);
call    0 returned 100%
    10000:  250:	if (j % 5 == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
     2000:  251:	  if (j % 50 == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      200:  252:	    if (j % 250 == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       40:  253:	      fprintf (stdout, "    <%d>\n\n   ", j);
call    0 returned 100%
        -:  254:	    else
      160:  255:	      fprintf (stdout, "\n   ");
call    0 returned 100%
        -:  256:	  else
     1800:  257:	    fprintf (stdout, " ");
call    0 returned 100%
        -:  258:      }
        -:  259:  }
        1:  260:}
