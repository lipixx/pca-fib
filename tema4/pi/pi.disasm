00000000004007fe <SUBTRACT>:
  4007fe:	55                   	push   rbp
  4007ff:	48 89 e5             	mov    rbp,rsp
  400802:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi  //Carrega els 3 paràmetres a pila, x
  400806:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi  // y
  40080a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx  // z
  40080e:	8b 05 40 9b 20 00    	mov    eax,DWORD PTR [rip+0x209b40]        # x+=60a354 <N4>
  400814:	48 98                	cdqe   //Convert DobleWord in EAX to QuadWord in RDX
  400816:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
  40081a:	8b 05 34 9b 20 00    	mov    eax,DWORD PTR [rip+0x209b34]        # y+=60a354 <N4>  (y és rbp-0x30)
  400820:	48 98                	cdqe   
  400822:	48 01 45 d0          	add    QWORD PTR [rbp-0x30],rax

  400826:	8b 05 28 9b 20 00    	mov    eax,DWORD PTR [rip+0x209b28]        # z+=60a354 <N4> (z és rbp-0x38)
  40082c:	48 98                	cdqe   
  40082e:	48 01 45 c8          	add    QWORD PTR [rbp-0x38],rax

  400832:	8b 05 1c 9b 20 00    	mov    eax,DWORD PTR [rip+0x209b1c]        # k=60a354 <N4>
  400838:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax

  40083b:	eb 65                	jmp    4008a2 <SUBTRACT+0xa4> -----------------
  40083d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30] //*y
  400841:	0f b6 00             	movzx  eax,BYTE PTR [rax]  ////Mov from memory and zero extend.
  
  400844:	89 c2                	mov    edx,eax			//edx = *y

  400846:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38] //*z
  40084a:	0f b6 00             	movzx  eax,BYTE PTR [rax]       //eax=*z
  40084d:	89 d1                	mov    ecx,edx			//ecx=*y
  40084f:	28 c1                	sub    cl,al			//subtract al from cl, lowest bytes of eax and ecx, store in cl.
  400851:	89 c8                	mov    eax,ecx			//eax = *y - *z
  400853:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al   
  400856:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
  40085a:	79 29                	jns    400885 <SUBTRACT+0x87>  // if (v<0) (jump near if not signed (positive), to label othrwise)
  40085c:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]  //eax=v
  400860:	83 c0 0a             	add    eax,0xa                 //v+=10
  400863:	89 c2                	mov    edx,eax                 //edx = v+10
  400865:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28] 
  400869:	88 10                	mov    BYTE PTR [rax],dl        //lowest bits of edx to *x
  40086b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38] //rax = *z
  40086f:	48 8d 50 ff          	lea    rdx,[rax-0x1]            
  400873:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38] //rax = *z
  400877:	48 83 e8 01          	sub    rax,0x1                  //rax = *z-1
  40087b:	0f b6 00             	movzx  eax,BYTE PTR [rax]      
  40087e:	83 c0 01             	add    eax,0x1                  //eax = *(z-1)+1
  400881:	88 02                	mov    BYTE PTR [rdx],al        //*(z-1) = eax;
  400883:	eb 0a                	jmp    40088f <SUBTRACT+0x91>
  400885:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  400889:	0f b6 55 ff          	movzx  edx,BYTE PTR [rbp-0x1]
  40088d:	88 10                	mov    BYTE PTR [rax],dl
  40088f:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1   //k--
  400893:	48 83 6d d8 01       	sub    QWORD PTR [rbp-0x28],0x1  //
  400898:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1  //
  40089d:	48 83 6d c8 01       	sub    QWORD PTR [rbp-0x38],0x1  //
  4008a2:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0  //k >=0
  4008a6:	79 95                	jns    40083d <SUBTRACT+0x3f> ---------
  4008a8:	c9                   	leave  
  4008a9:	c3                   	ret 